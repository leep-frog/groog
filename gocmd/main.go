package main

import (
	"encoding/json"
	"os"

	"github.com/leep-frog/command"
	"github.com/leep-frog/command/sourcerer"
	"golang.org/x/exp/slices"
)

func main() {
	os.Exit(sourcerer.Source([]sourcerer.CLI{&cli{}}))
}

type cli struct{}

func (*cli) Name() string    { return "vs_package" }
func (*cli) Setup() []string { return nil }
func (*cli) Changed() bool   { return false }

func (*cli) Node() command.Node {
	outputFile := command.FileArgument("OUTPUT_FILE", "File to write json contents", &command.FileCompleter[string]{
		FileTypes: []string{"json"},
	})
	return command.SerialNodes(
		outputFile,
		&command.ExecutorProcessor{func(o command.Output, d *command.Data) error {
			p := &Package{
				Name:        "groog",
				DisplayName: "groog",
				Description: "",
				Version:     "1.0.9",
				Publisher:   "groogle",
				Main:        "./out/extension.js",
				Engines: map[string]string{
					"vscode": "^1.81.0",
				},
				Repository: &Repository{
					Type: "git",
					URL:  "https://github.com/leep-frog/vs-extension",
				},
				Categories: []string{
					"Other",
				},
				Scripts: map[string]string{
					"vscode:prepublish": "npm run compile",
					"compile":           "tsc -p ./",
					"watch":             "tsc -watch -p ./",
					"pretest":           "npm run compile && npm run lint",
					"lint":              "eslint src --ext ts",
					"test":              "node ./out/test/runTest.js",
				},
				DevDependencies: map[string]string{
					"@types/vscode":                    "^1.81.0",
					"@types/mocha":                     "^10.0.1",
					"@types/node":                      "16.x",
					"@typescript-eslint/eslint-plugin": "^6.4.1",
					"@typescript-eslint/parser":        "^6.4.1",
					"eslint":                           "^8.47.0",
					"glob":                             "^10.3.3",
					"mocha":                            "^10.2.0",
					"typescript":                       "^5.1.6",
					"@vscode/test-electron":            "^2.3.4",
				},
				// onCommand activation events are auto-generated by vscode, so we don't
				// actually need to populate this at all, but it needs to be present.
				ActivationEvents: []string{},
			}

			p.Contributes = &Contribution{
				Commands:      CustomCommands,
				Keybindings:   kbDefsToBindings(),
				Configuration: groogConfiguration(),
				Snipppets:     Snippets,
			}
			slices.SortFunc(p.Contributes.Commands, func(a, b *Command) bool {
				return a.Command < b.Command
			})

			j, err := json.MarshalIndent(p, "", "  ")
			if err != nil {
				return o.Annotatef(err, "failed to marshal json")
			}

			if err := os.WriteFile(outputFile.Get(d), append(j, byte('\n')), 0644); err != nil {
				return o.Annotatef(err, "failed to write json to output file")
			}
			return nil
		}})
}
