{"version":3,"file":"extension.js","mappings":"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","sources":["../.././src/web/emacs.ts","../.././src/web/multi-command.ts","../../external commonjs \"vscode\"","../../webpack/bootstrap","../.././src/web/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\n\nconst jumpDist = 10;\nexport const cursorMoves: string[] = [\n  \"cursorUp\", \"cursorDown\", \"cursorLeft\", \"cursorRight\",\n  \"cursorHome\", \"cursorEnd\",\n  \"cursorWordLeft\", \"cursorWordRight\",\n  \"cursorTop\", \"cursorBottom\"\n];\n\nexport class Emacs {\n  private yanked: string;\n  private qmk: boolean;\n  private markMode: boolean;\n\n  constructor() {\n    this.yanked = \"\";\n    // TODO: store this in persistent storage somewhere\n    this.qmk = false;\n    this.markMode = false;\n  }\n\n  toggleQMK() {\n    if (this) {\n      console.log(\"qmk yes\");\n    } else {\n      console.log(\"qmk no\");\n    }\n    if (this.qmk) {\n      vscode.window.showInformationMessage('Basic keyboard mode activated');\n    } else {\n      vscode.window.showInformationMessage('QMK keyboard mode activated');\n    }\n\t\tthis.qmk = !this.qmk;\n    vscode.commands.executeCommand('setContext', 'groog.qmk', this.qmk);\n  }\n\n  toggleMarkMode() {\n    if (this.markMode) {\n      // Deselect\n      vscode.commands.executeCommand(\"cancelSelection\");\n    }\n    this.markMode = !this.markMode;\n    vscode.commands.executeCommand('setContext', 'groog.markMode', true);\n  }\n\n  yank() {\n    this.markMode = false;\n\n    let range = vscode.window.activeTextEditor?.selection;\n    let maybe = vscode.window.activeTextEditor?.document.getText(range);\n    if (maybe) {\n      this.yanked = maybe;\n      vscode.window.activeTextEditor?.edit(editBuilder => {\n        if (range) {\n          editBuilder.delete(range);\n        }\n      });\n    }\n    maybe ? this.yanked = maybe : this.yanked = \"\";\n  }\n\n  paste() {\n    this.markMode = false;\n\n    // Overwrite selection if relevant.\n\n    vscode.window.activeTextEditor?.edit(editBuilder => {\n      let editor = vscode.window.activeTextEditor;\n      if (!editor) {\n        return;\n      }\n      editBuilder.insert(editor.selection.active, this.yanked);\n    });\n  }\n\n  ctrlG() {\n    if (this.markMode) {\n      this.toggleMarkMode();\n    } else {\n      // This is done in toggle mark mode so don't need to do it twice\n      // if not in that mode.\n      vscode.commands.executeCommand(\"cancelSelection\");\n    }\n    vscode.commands.executeCommand(\"closeFindWidget\");\n    vscode.commands.executeCommand(\"removeSecondaryCursors\");\n  }\n\n  kill() {\n    this.markMode = false;    \n\n    let editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      return;\n    }\n\n    let startPos = editor.selection.active;\n    let endPos = editor.document.lineAt(startPos.line).range.end;\n    let range = new vscode.Range(startPos, endPos);\n    let text = editor.document.getText(range);\n    if (text.trim().length === 0) {\n      range = new vscode.Range(startPos, new vscode.Position(startPos.line + 1, 0));\n    }\n    this.yanked = editor.document.getText(range);\n    vscode.window.activeTextEditor?.edit(editBuilder => {\n      editBuilder.delete(range);\n    });\n  }\n\n  // C-l\n  jump() {\n    this.move(\"cursorMove\", {\"to\": \"up\", \"by\": \"line\", \"value\": jumpDist});\n  }\n\n  // C-v\n  fall() {\n    this.move(\"cursorMove\", {\"to\": \"down\", \"by\": \"line\", \"value\": jumpDist});\n  }\n\n  move(vsCommand: string, ...rest: any[]) {\n    if (this.markMode) {\n      vscode.commands.executeCommand(vsCommand + \"Select\", ...rest);\n    } else {\n      vscode.commands.executeCommand(vsCommand, ...rest);\n    }\n  }\n}","import * as vscode from 'vscode';\n\nexport interface MultiCommand {\n  sequence: string[]\n}\n\nexport function multiCommand(mc: MultiCommand) {\n  for (var command of mc.sequence) {\n    vscode.commands.executeCommand(command);\n  }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport {Emacs, cursorMoves} from './emacs';\nimport {multiCommand} from './multi-command';\n\nfunction register(context: vscode.ExtensionContext, commandName: string, callback: (...args: any[]) => any) {\n  context.subscriptions.push(vscode.commands.registerCommand(\"groog.\" + commandName, (...args: any) => {\n    callback(...args);\n  }));\n}\n\nconst groogery = new Emacs();\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  for (var move of cursorMoves) {\n    const m = move;\n    register(context, move, () => groogery.move(m));\n  }\n  register(context, 'jump', () => groogery.jump());\n  register(context, 'fall', () => groogery.fall());\n\n  register(context, 'toggleQMK', () => groogery.toggleQMK());\n  register(context, 'toggleMarkMode', () => groogery.toggleMarkMode());\n  register(context, 'yank', () => groogery.yank());\n  register(context, 'paste', () => groogery.paste());\n  register(context, 'kill', () => groogery.kill());\n  register(context, 'ctrlG', () => groogery.ctrlG());\n  register(context, \"multiCommand.execute\", multiCommand);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["cursorMoves","constructor","this","yanked","qmk","markMode","toggleQMK","console","log","vscode","window","showInformationMessage","commands","executeCommand","toggleMarkMode","yank","range","activeTextEditor","selection","maybe","document","getText","edit","editBuilder","delete","paste","editor","insert","active","ctrlG","kill","startPos","endPos","lineAt","line","end","Range","trim","length","Position","jump","move","fall","vsCommand","rest","mc","command","sequence","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","register","context","commandName","callback","subscriptions","push","registerCommand","args","groogery","Emacs","m","multiCommand"],"sourceRoot":""}